7월 22일 오전수업 작업한 내용 정리.

< 목표 >
1차: 거북이 이동을 통해 시작점에서 종점에 도착하는 알고리즘 구현하기.
2차: 장애물 생성하기.
3차: 생성된 장애물을 회피하기 (회피 구현 과정에서 충돌 감지 함수를 구현하고, 장애물 회피 함수 완성)
4차: 거리 계산 함수 구현.
5차: 목표점 도달 여부 확인 기능 구현.
6차: random 함수를 사용하여 출발점, 도착점, 장애물 위치를 랜덤으로 지정

< 목표 진행도 >
5차까지 완료한 상태. 추후 6차까지 완성할 예정.

< 사용한 알고리즘 >

1. 화면생성 + 시작점, 종점 생성

2. 오브젝트 생성
2-1. 거북이(이동개체)
2-2. 장애물
2-3. 메시지 출력용 터틀

3. 충돌을 검사하는 함수 생성
각 요소의 위치(거북이와 장애물)를 확인,
장애물의 실제 넓이를 추정함.
부딪혔을 때, if문을 활용하여 충돌 판정을 내림.

4. 메시지 출력용 터틀(오브젝트) 생성

5. 이동 및 충돌 회피 함수 생성

5-1. 충돌: 충돌 감지! 경로 변경 중... 메시지를 출력 후
장애물을 피하게끔 거북이의 방향을 전환함.

5-2. 충돌x: 이동 중... 메시지를 상시 출력->
목표 장소(종착점)에 도착 시, 해당 메시지를 삭제.

5-3. 거리 계산: 거북이가 이동한 총 이동거리를 측정하여
total_distance에 저장 후, 도착 시 이동거리를 출력.
(총 이동거리: total_distance 픽셀)

6. 거북이의 상태를 출력 (이동 중/ 도착 완료 구별)
거북이가 목표지점에 도착했을 때, "목표 지점에 도착하였습니다." 메시지 출력
end_pos < 10으로 해둔 이유: == 10일 경우(완전히 같다로 조건을 설정한 경우) 판정이 까다로워져
도착했음에도 도착 메시지를 제대로 출력하지 않기 때문.

도착한 상태가 아니라면, 위의 충돌x 상황과 같이 이동 중 메시지 출력.
